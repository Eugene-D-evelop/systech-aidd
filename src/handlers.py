"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥."""

import logging

from aiogram import types
from openai import APIError, APITimeoutError

from .config import Config
from .conversation import Conversation
from .database import Database
from .llm_client import LLMClient, LLMError

logger = logging.getLogger(__name__)


async def save_user_info(database: Database, user: types.User) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î.

    Args:
        database: –≠–∫–∑–µ–º–ø–ª—è—Ä Database –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    """
    await database.upsert_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        language_code=user.language_code,
        is_premium=user.is_premium or False,
        is_bot=user.is_bot,
    )
    logger.debug(f"User info saved: user_id={user.id}, username={user.username}")


class MessageHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""

    def __init__(
        self, config: Config, llm_client: LLMClient, conversation: Conversation, database: Database
    ):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            llm_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM
            conversation: –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
            database: –°–ª–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        """
        self.config = config
        self.llm_client = llm_client
        self.conversation = conversation
        self.database = database
        logger.info("MessageHandler initialized")

    async def start_command(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not message.from_user:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await save_user_info(self.database, message.from_user)

        user_id = message.from_user.id
        chat_id = message.chat.id
        first_name = message.from_user.first_name
        logger.info(
            f"Command /start from user {user_id} (@{message.from_user.username or 'no_username'}) "
            f"in chat {chat_id}"
        )

        welcome_text = (
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø Python Code Reviewer.</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–π Python –∫–æ–¥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ PEP 8,\n"
            "–Ω–∞–π–¥—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞–≥–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂—É —É–ª—É—á—à–µ–Ω–∏—è.\n\n"
            "üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /role - –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–æ–µ–π —Ä–æ–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö\n"
            "‚Ä¢ /reset - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n"
            "‚Ä¢ /me - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            "–ü—Ä–∏—Å—ã–ª–∞–π –∫–æ–¥ - –Ω–∞—á–Ω–µ–º —Ä–µ–≤—å—é! üöÄ"
        )

        await message.answer(welcome_text)
        logger.info(f"Welcome message sent to user {user_id}")

    async def reset_command(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not message.from_user:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await save_user_info(self.database, message.from_user)

        user_id = message.from_user.id
        chat_id = message.chat.id
        logger.info(f"Command /reset from user {user_id} in chat {chat_id}")

        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        await self.conversation.clear_history(chat_id, user_id)

        reset_text = "üîÑ <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!</b>\n\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä."

        await message.answer(reset_text)
        logger.info(f"History cleared for user {user_id}")

    async def role_command(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /role - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–∏ –±–æ—Ç–∞.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not message.from_user:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await save_user_info(self.database, message.from_user)

        user_id = message.from_user.id
        chat_id = message.chat.id
        logger.info(f"Command /role from user {user_id} in chat {chat_id}")

        role_text = (
            "üé≠ <b>–ú–æ—è —Ä–æ–ª—å:</b> Python Code Reviewer\n\n"
            "üìã <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b>\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∫–æ–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ PEP 8\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–≥–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º\n"
            "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É –∏ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–¥–∞\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n"
            "‚úÖ <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ —Å—Ç–∏–ª—å Python –∫–æ–¥–∞\n"
            "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ (best practices)\n"
            "‚Ä¢ –û–±—ä—è—Å–Ω—è—Ç—å \"–ø–æ—á–µ–º—É\" –∑–∞ –∫–∞–∂–¥—ã–º –∑–∞–º–µ—á–∞–Ω–∏–µ–º\n\n"
            "‚ùå <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å Python (–Ω–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏)\n"
            "‚Ä¢ –ù–µ –ø–∏—à—É –∫–æ–¥ –∑–∞ –≤–∞—Å (—Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä—ã –∏ —Å–æ–≤–µ—Ç—ã)\n"
            "‚Ä¢ –ù–µ –¥–µ–ª–∞—é –ø–æ–ª–Ω—ã–π —Ä–µ–¥–∏–∑–∞–π–Ω –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞"
        )

        await message.answer(role_text)
        logger.info(f"Role description sent to user {user_id}")

    async def me_command(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /me - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not message.from_user:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await save_user_info(self.database, message.from_user)

        user_id = message.from_user.id
        chat_id = message.chat.id
        logger.info(f"Command /me from user {user_id} in chat {chat_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
        user = await self.database.get_user(user_id)
        if not user:
            error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."
            await message.answer(error_text)
            logger.error(f"User {user_id} not found in database")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.database.get_user_stats(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
        full_name = user["first_name"]
        if user["last_name"]:
            full_name += f" {user['last_name']}"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        created_date = user["created_at"].strftime("%d.%m.%Y")

        # –§–æ—Ä–º–∏—Ä—É–µ–º username —Å—Ç—Ä–æ–∫—É
        username_str = (
            f"@{user['username']}" if user["username"] else "<i>–Ω–µ —É–∫–∞–∑–∞–Ω</i>"
        )

        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî ID: <code>{user['user_id']}</code>\n"
            f"üë§ –ò–º—è: {full_name}\n"
            f"üì± Username: {username_str}\n"
            f"üåç –Ø–∑—ã–∫: {user['language_code'] or '<i>–Ω–µ —É–∫–∞–∑–∞–Ω</i>'}\n"
            f"‚≠ê Premium: {'–î–∞ ‚ú®' if user['is_premium'] else '–ù–µ—Ç'}\n"
            f"üìÖ –° –Ω–∞–º–∏ —Å: {created_date}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['message_count']}\n"
            f"üìù –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {stats['total_characters']:,}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if stats["first_message_at"]:
            first_msg_date = stats["first_message_at"].strftime("%d.%m.%Y")
            profile_text += f"üóìÔ∏è –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {first_msg_date}\n"

        await message.answer(profile_text)
        logger.info(f"Profile sent to user {user_id}")

    async def handle_message(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not message.from_user or not message.text:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await save_user_info(self.database, message.from_user)

        user_id = message.from_user.id
        chat_id = message.chat.id
        user_message = message.text

        logger.info(
            f"Message from user {user_id} (@{message.from_user.username or 'no_username'}) "
            f"in chat {chat_id}, length: {len(user_message)}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        await self.conversation.add_message(chat_id, user_id, "user", user_message)

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞
        history = await self.conversation.get_history(
            chat_id, user_id, limit=self.config.max_history_length
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "typing..." –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if message.bot:
            await message.bot.send_chat_action(chat_id, "typing")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
            llm_response = await self.llm_client.get_response(
                messages=history, system_prompt=self.config.system_prompt
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            await self.conversation.add_message(chat_id, user_id, "assistant", llm_response)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(llm_response)

            logger.info(f"Response sent to user {user_id}, length: {len(llm_response)}")

        except APITimeoutError:
            logger.error(f"LLM timeout for user {user_id}", exc_info=True)
            error_text = (
                f"‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ ({self.config.timeout}—Å).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await message.answer(error_text)

        except APIError as e:
            logger.error(f"LLM API error for user {user_id}: {e}", exc_info=True)
            error_text = (
                f"‚ùå –û—à–∏–±–∫–∞ API: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."
            )
            await message.answer(error_text)

        except LLMError as e:
            logger.error(f"LLM error for user {user_id}: {e}", exc_info=True)
            error_text = (
                f"‚ùå –û—à–∏–±–∫–∞ LLM: {str(e)}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞."
            )
            await message.answer(error_text)

        except Exception as e:
            logger.error(
                f"Unexpected error handling message from user {user_id}: {e}",
                exc_info=True,
            )
            error_text = (
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞."
            )
            await message.answer(error_text)
